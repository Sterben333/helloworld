// 定义项目 API 的 proto 文件 可以同时描述 gRPC 和 HTTP API
// protobuf 文件参考:
//  - https://developers.google.com/protocol-buffers/
syntax = "proto3"; //表明我们使用版本是 proto3

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..
package demo.service.v1;

// NOTE: 最后请删除这些无用的注释 (゜-゜)つロ
// protobuf定义了一种后缀名为“.proto”的描述型文件为待传输的结构化数据作为数据协议，
// 待传输的数据必须符合“.proto”文件中的相关定义。“.proto”文件在简洁易读的同时很好地保留了原数据的结构信息，
// 并且还给出了一些实用的关键字，灵活地让开发者对数据中的字段做选取，给了开发人员很大的发挥空间，
// 基本解决了其他协议出现的被需求牵着走的局面。“.proto”文件可以看作一种数据传输的协议，需要开发人员按照语法编写
option go_package = "api";// 经过protoc --go_out=. *.proto指令之后希望放在的文件夹
option (gogoproto.goproto_getters_all) = false;

// 定义服务接口
service Demo {//请求，远程调用
  // google.protobuf.Empty返回空参
  rpc Ping(.google.protobuf.Empty) returns (.google.protobuf.Empty);
  rpc SayHello(HelloReq) returns (.google.protobuf.Empty);
  rpc SayHelloURL(HelloReq) returns (HelloResp) {
    option (google.api.http) = {// 该配置指定SayHelloURL方法对应的url
      get: "/kratos-demo/say_hello"// 指定url和请求方式为GET
    };
  };

  //----------------------------自定义接口-------------------//
  //新增登录服务接口
  rpc Login(LoginReq) returns (LoginResp) {
    option (google.api.http) = {
      get: "/user/login"
    };
  };

  //增删改查
  rpc AddUser(AddReq) returns (Response) {
    option (google.api.http) = {
      post: "/adduser"
    };
  };
  rpc DeleteUser(DeleteReq) returns (Response) {
    option (google.api.http) = {
      get: "/deleteuser"
    };
  };
  rpc UpdateUser(UpdateReq) returns (Response) {
    option (google.api.http) = {
      put: "/updateuser"
    };
  };
  rpc GetUser(GetReq) returns (Response) {
    option (google.api.http) = {
      put: "/getuser"
    };
  };
  rpc GetUserList(.google.protobuf.Empty) returns (Response) {
    option (google.api.http) = {
      get: "/getuserlist"
    };
  };
}

//--------------------自定义message：自定义验证器错误消息--------------------------//
//-----jsontag
//-----其他tag（moretags）
        //-----form：
        //-----validate：验证器
                //------required：字段为必填项，值不能为空
message LoginReq {
  string username = 1 [(gogoproto.moretags) = 'form:"username" ']; //form-表单username
  string passwd = 2 [(gogoproto.moretags) = 'form:"passwd" ']; //form-表单passwd
}

//新增登录接口响应参数
message LoginResp {
  string Content = 1 [(gogoproto.jsontag) = 'content'];
}

//增删改查接口响应参数
message AddReq {
  string nickname = 1 [(gogoproto.moretags) = 'form:"nickname" '];
  int32 age = 2 [(gogoproto.moretags) = 'form:"age" validate:'];
}

message UpdateReq {
  int64 uid = 1 [(gogoproto.moretags) = 'form:"uid" '];
  string nickname = 2 [(gogoproto.moretags) = 'form:"nickname" '];
  int32 age = 3 [(gogoproto.moretags) = 'form:"age" '];
}

message DeleteReq {
  int64 uid = 1 [(gogoproto.moretags) = 'form:"uid" '];
}

message GetReq {
  int64 uid = 1 [(gogoproto.moretags) = 'form:"uid" '];
}

message Response {
  string Content = 1 [(gogoproto.jsontag) = 'content'];
}

// ---------------------------------下面这个不是-----------------------------------------//
//定义请求参数
message HelloReq {
  string name = 1 [(gogoproto.moretags) = 'form:"name" '];
}

//定义响应参数
message HelloResp {
  string Content = 1 [(gogoproto.jsontag) = 'content'];
}


